@model CalculatorViewModel
@section header {
    <style>
        a {
            text-decoration: none;
        }

        .nunitimg {
            position: absolute;
            top: 8px;
            right: 8px;
            height: 50px;
            width: 50px;
        }

        .testresult {
            position: absolute;
            right: 0px;
            top: 59px;
            width: 140px;
            background-color: rgba(255, 255, 255, 1);
        }
    </style>
}

<div>
    <a asp-controller="Calculator" asp-action="Test" id="testButton">
        <img src="~/nunit.png" class="nunitimg" />
    </a>
    <a class="testresult" asp-controller="Calculator" asp-action="Result">@Html.Raw(ViewBag.TestResult)</a>
</div>

@{
    // This State->View visibility mapping is the central axis of the SMC pattern.
    IHtmlContent title = null;
    IHtmlContent splash = null;
    IHtmlContent calculate = null;
    IHtmlContent error = null;
    IHtmlContent enter = null;
    IHtmlContent footer = null;

    title = await Component.InvokeAsync("Title", @Model);

    switch (Model.State)
    {
        case var s when s == CalculatorContext.Map1.Calculate:
            calculate = await Component.InvokeAsync("Calculate", @Model);
            break;
        case var s when s == CalculatorContext.Map1.Enter:
            enter = await Component.InvokeAsync("Enter");
            break;
        case var s when s == CalculatorContext.Map1.ErrorNumeric:
            ViewBag.Msg = "The input was not numeric.";
            error = await Component.InvokeAsync("Error");
            break;
        case var s when s == CalculatorContext.Map1.ErrorTuple:
            ViewBag.Msg = "Need two values on the stack to compute.";
            error = await Component.InvokeAsync("Error");
            break;
        case var s when s == CalculatorContext.Map1.ErrorEmpty:
            ViewBag.Msg = "Need a value on the stack to compute.";
            error = await Component.InvokeAsync("Error");
            break;
        case var s when s == CalculatorContext.Map1.Splash:
            splash = await Component.InvokeAsync("Splash");
            break;
        default:
            throw new NotImplementedException(String.Format("this.State {0}", Model.State));
    }

    footer = await Component.InvokeAsync("Footer");
}

<form asp-controller="Calculator" method="post">
    <input viewstate="@ViewBag.ViewState" />
    @title
    <hr />
    @splash
    @enter
    @calculate
    @error
    <hr />
    @footer
</form>