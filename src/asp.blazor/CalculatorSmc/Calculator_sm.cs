/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Calculator.sm
 */

using System;
using System.Runtime.Serialization;
using System.Security;
using System.Security.Permissions;
using System.Collections.Generic;

using asp.blazor.CalculatorSmc;
[Serializable]
[System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
public sealed class CalculatorContext :
    statemap.FSMContext,
    ISerializable
{
//---------------------------------------------------------------
// Properties.
//

    public CalculatorState State
    {
        get
        {
            if (state_ == null)
            {
                throw(
                    new statemap.StateUndefinedException());
            }

            return ((CalculatorState) state_);
        }
        set
        {
            SetState(value);
        }
    }

    public Calculator Owner
    {
        get
        {
            return (_owner);
        }
        set
        {
            _owner = value;
        }
    }

    public CalculatorState[] States
    {
        get
        {
            return (_States);
        }
    }

//---------------------------------------------------------------
// Member methods.
//

    public CalculatorContext(Calculator owner) :
        base (Map1.Splash)
    {
        _owner = owner;
    }

    public override void EnterStartState()
    {
        State.Entry(this);
        return;
    }

    public CalculatorContext(SerializationInfo info, StreamingContext context) :
        base ()
    {
        int stackSize;
        int stateId;

        stackSize = info.GetInt32("stackSize");
        if (stackSize > 0)
        {
            int index;
            String name;

            for (index = (stackSize - 1); index >= 0; --index)
            {
                name = "stackIndex" + index;
                stateId = info.GetInt32(name);
                PushState(_States[stateId]);
            }
        }

        stateId = info.GetInt32("state");
        PushState(_States[stateId]);
    }

    public void Add(Stack<string> stack)
    {
        transition_ = "Add";
        State.Add(this, stack);
        transition_ = "";
        return;
    }

    public void Clr(Stack<string> stack)
    {
        transition_ = "Clr";
        State.Clr(this, stack);
        transition_ = "";
        return;
    }

    public void ClrAll(Stack<string> stack)
    {
        transition_ = "ClrAll";
        State.ClrAll(this, stack);
        transition_ = "";
        return;
    }

    public void Div(Stack<string> stack)
    {
        transition_ = "Div";
        State.Div(this, stack);
        transition_ = "";
        return;
    }

    public void Enter(string value)
    {
        transition_ = "Enter";
        State.Enter(this, value);
        transition_ = "";
        return;
    }

    public void Mul(Stack<string> stack)
    {
        transition_ = "Mul";
        State.Mul(this, stack);
        transition_ = "";
        return;
    }

    public void Pow(Stack<string> stack)
    {
        transition_ = "Pow";
        State.Pow(this, stack);
        transition_ = "";
        return;
    }

    public void Sqrt(Stack<string> stack)
    {
        transition_ = "Sqrt";
        State.Sqrt(this, stack);
        transition_ = "";
        return;
    }

    public void Sub(Stack<string> stack)
    {
        transition_ = "Sub";
        State.Sub(this, stack);
        transition_ = "";
        return;
    }

    public CalculatorState valueOf(int stateId)
    {
        return(_States[stateId]);
    }

    [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter=true)]
    public void GetObjectData(SerializationInfo info,
                              StreamingContext context)
    {
        int stackSize = 0;

        if (stateStack_ != null)
        {
            stackSize = stateStack_.Count;
        }

        info.AddValue("stackSize", stackSize);

        if (stackSize > 0)
        {
            int index = 0;
            String name;

            foreach (CalculatorState state in stateStack_)
            {
                name = "stackIndex" + index;
                info.AddValue(name, state.Id);
                ++index;
            }
        }

        info.AddValue("state", state_.Id);

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    [NonSerialized]
    private Calculator _owner;

    // Map state IDs to state objects.
    // Used to deserialize an FSM.
    [NonSerialized]
    private static CalculatorState[] _States =
    {
        Map1.Splash,
        Map1.Enter,
        Map1.Calculate,
        Map1.ErrorNumeric,
        Map1.ErrorTuple,
        Map1.ErrorEmpty
    };

//---------------------------------------------------------------
// Inner classes.
//

    [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
    public abstract class CalculatorState :
        statemap.State
    {
    //-----------------------------------------------------------
    // Properties.
    //

        public abstract IDictionary<string, int> Transitions
        {
            get;
        }

    //-----------------------------------------------------------
    // Member methods.
    //

        internal CalculatorState(string name, int id) :
            base (name, id)
        {}

        protected internal virtual void Entry(CalculatorContext context)
        {}

        protected internal virtual void Exit(CalculatorContext context)
        {}

        protected internal virtual void Add(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Clr(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void ClrAll(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Div(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Enter(CalculatorContext context, string value)
        {
            Default(context);
        }

        protected internal virtual void Mul(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Pow(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Sqrt(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Sub(CalculatorContext context, Stack<string> stack)
        {
            Default(context);
        }

        protected internal virtual void Default(CalculatorContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.State.Name +
                    ", Transition: " +
                    context.GetTransition()));
        }
    }
    [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]

    internal abstract class Map1
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Statics.
        //
        [NonSerialized]
        internal static readonly Map1_Default.Map1_Splash Splash =
            new Map1_Default.Map1_Splash("Map1.Splash", 0);
        [NonSerialized]
        internal static readonly Map1_Default.Map1_Enter Enter =
            new Map1_Default.Map1_Enter("Map1.Enter", 1);
        [NonSerialized]
        internal static readonly Map1_Default.Map1_Calculate Calculate =
            new Map1_Default.Map1_Calculate("Map1.Calculate", 2);
        [NonSerialized]
        internal static readonly Map1_Default.Map1_ErrorNumeric ErrorNumeric =
            new Map1_Default.Map1_ErrorNumeric("Map1.ErrorNumeric", 3);
        [NonSerialized]
        internal static readonly Map1_Default.Map1_ErrorTuple ErrorTuple =
            new Map1_Default.Map1_ErrorTuple("Map1.ErrorTuple", 4);
        [NonSerialized]
        internal static readonly Map1_Default.Map1_ErrorEmpty ErrorEmpty =
            new Map1_Default.Map1_ErrorEmpty("Map1.ErrorEmpty", 5);
        [NonSerialized]
        private static readonly Map1_Default Default =
            new Map1_Default("Map1.Default", -1);

    }

    [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
    internal class Map1_Default :
        CalculatorState
    {
    //-----------------------------------------------------------
    // Properties.
    //

        public override IDictionary<string, int> Transitions
        {
            get
            {
                return (_transitions);
            }
        }

    //-----------------------------------------------------------
    // Member methods.
    //

        internal Map1_Default(string name, int id) :
            base (name, id)
        {}

    //-----------------------------------------------------------
    // Inner classes.
    //

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class Map1_Splash :
            Map1_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal Map1_Splash(string name, int id) :
                base (name, id)
            {}

            protected internal override void Enter(CalculatorContext context, string value)
            {

                context.State.Exit(context);
                context.State = Map1.Enter;
                context.State.Entry(context);


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static Map1_Splash()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("Add(Stack<string> stack)", 0);
                _transitions.Add("Clr(Stack<string> stack)", 0);
                _transitions.Add("ClrAll(Stack<string> stack)", 0);
                _transitions.Add("Div(Stack<string> stack)", 0);
                _transitions.Add("Enter(string value)", 1);
                _transitions.Add("Mul(Stack<string> stack)", 0);
                _transitions.Add("Pow(Stack<string> stack)", 0);
                _transitions.Add("Sqrt(Stack<string> stack)", 0);
                _transitions.Add("Sub(Stack<string> stack)", 0);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class Map1_Enter :
            Map1_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal Map1_Enter(string name, int id) :
                base (name, id)
            {}

            protected internal override void Enter(CalculatorContext context, string value)
            {

                Calculator ctxt = context.Owner;

                if (double.TryParse(value, out double _))
                {

                    context.State.Exit(context);
                    context.ClearState();

                    try
                    {
                        ctxt.Enter(value);
                    }
                    finally
                    {
                        context.State = Map1.Calculate;
                        context.State.Entry(context);
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorNumeric;
                    context.State.Entry(context);
                }

                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static Map1_Enter()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("Add(Stack<string> stack)", 0);
                _transitions.Add("Clr(Stack<string> stack)", 0);
                _transitions.Add("ClrAll(Stack<string> stack)", 0);
                _transitions.Add("Div(Stack<string> stack)", 0);
                _transitions.Add("Enter(string value)", 1);
                _transitions.Add("Mul(Stack<string> stack)", 0);
                _transitions.Add("Pow(Stack<string> stack)", 0);
                _transitions.Add("Sqrt(Stack<string> stack)", 0);
                _transitions.Add("Sub(Stack<string> stack)", 0);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class Map1_Calculate :
            Map1_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal Map1_Calculate(string name, int id) :
                base (name, id)
            {}

            protected internal override void Add(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 2)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Add();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorTuple;
                    context.State.Entry(context);
                }

                return;
            }

            protected internal override void Clr(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 1)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Clr();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorEmpty;
                    context.State.Entry(context);
                }

                return;
            }

            protected internal override void ClrAll(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                CalculatorState endState = context.State;

                context.ClearState();

                try
                {
                    ctxt.ClrAll();
                }
                finally
                {
                    context.State = endState;
                }



                return;
            }

            protected internal override void Div(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 2)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Div();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorTuple;
                    context.State.Entry(context);
                }

                return;
            }

            protected internal override void Enter(CalculatorContext context, string value)
            {

                context.State.Exit(context);
                context.State = Map1.Enter;
                context.State.Entry(context);


                return;
            }

            protected internal override void Mul(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 2)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Mul();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorTuple;
                    context.State.Entry(context);
                }

                return;
            }

            protected internal override void Pow(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 1)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Pow();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorEmpty;
                    context.State.Entry(context);
                }

                return;
            }

            protected internal override void Sqrt(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 1)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Sqrt();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorEmpty;
                    context.State.Entry(context);
                }

                return;
            }

            protected internal override void Sub(CalculatorContext context, Stack<string> stack)
            {

                Calculator ctxt = context.Owner;

                if (stack.Count >= 2)
                {
                    CalculatorState endState = context.State;

                    context.ClearState();

                    try
                    {
                        ctxt.Sub();
                    }
                    finally
                    {
                        context.State = endState;
                    }

                }
                else
                {

                    context.State.Exit(context);
                    context.State = Map1.ErrorTuple;
                    context.State.Entry(context);
                }

                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static Map1_Calculate()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("Add(Stack<string> stack)", 1);
                _transitions.Add("Clr(Stack<string> stack)", 1);
                _transitions.Add("ClrAll(Stack<string> stack)", 1);
                _transitions.Add("Div(Stack<string> stack)", 1);
                _transitions.Add("Enter(string value)", 1);
                _transitions.Add("Mul(Stack<string> stack)", 1);
                _transitions.Add("Pow(Stack<string> stack)", 1);
                _transitions.Add("Sqrt(Stack<string> stack)", 1);
                _transitions.Add("Sub(Stack<string> stack)", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class Map1_ErrorNumeric :
            Map1_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal Map1_ErrorNumeric(string name, int id) :
                base (name, id)
            {}

            protected internal override void Enter(CalculatorContext context, string value)
            {

                context.State.Exit(context);
                context.State = Map1.Enter;
                context.State.Entry(context);


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static Map1_ErrorNumeric()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("Add(Stack<string> stack)", 0);
                _transitions.Add("Clr(Stack<string> stack)", 0);
                _transitions.Add("ClrAll(Stack<string> stack)", 0);
                _transitions.Add("Div(Stack<string> stack)", 0);
                _transitions.Add("Enter(string value)", 1);
                _transitions.Add("Mul(Stack<string> stack)", 0);
                _transitions.Add("Pow(Stack<string> stack)", 0);
                _transitions.Add("Sqrt(Stack<string> stack)", 0);
                _transitions.Add("Sub(Stack<string> stack)", 0);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class Map1_ErrorTuple :
            Map1_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal Map1_ErrorTuple(string name, int id) :
                base (name, id)
            {}

            protected internal override void Enter(CalculatorContext context, string value)
            {

                context.State.Exit(context);
                context.State = Map1.Enter;
                context.State.Entry(context);


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static Map1_ErrorTuple()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("Add(Stack<string> stack)", 0);
                _transitions.Add("Clr(Stack<string> stack)", 0);
                _transitions.Add("ClrAll(Stack<string> stack)", 0);
                _transitions.Add("Div(Stack<string> stack)", 0);
                _transitions.Add("Enter(string value)", 1);
                _transitions.Add("Mul(Stack<string> stack)", 0);
                _transitions.Add("Pow(Stack<string> stack)", 0);
                _transitions.Add("Sqrt(Stack<string> stack)", 0);
                _transitions.Add("Sub(Stack<string> stack)", 0);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class Map1_ErrorEmpty :
            Map1_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal Map1_ErrorEmpty(string name, int id) :
                base (name, id)
            {}

            protected internal override void Enter(CalculatorContext context, string value)
            {

                context.State.Exit(context);
                context.State = Map1.Enter;
                context.State.Entry(context);


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static Map1_ErrorEmpty()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("Add(Stack<string> stack)", 0);
                _transitions.Add("Clr(Stack<string> stack)", 0);
                _transitions.Add("ClrAll(Stack<string> stack)", 0);
                _transitions.Add("Div(Stack<string> stack)", 0);
                _transitions.Add("Enter(string value)", 1);
                _transitions.Add("Mul(Stack<string> stack)", 0);
                _transitions.Add("Pow(Stack<string> stack)", 0);
                _transitions.Add("Sqrt(Stack<string> stack)", 0);
                _transitions.Add("Sub(Stack<string> stack)", 0);
            }
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Statics.
        //
        private static IDictionary<string, int> _transitions;

        static Map1_Default()
        {
            _transitions = new Dictionary<string, int>();
            _transitions.Add("Add(Stack<string> stack)", 0);
            _transitions.Add("Clr(Stack<string> stack)", 0);
            _transitions.Add("ClrAll(Stack<string> stack)", 0);
            _transitions.Add("Div(Stack<string> stack)", 0);
            _transitions.Add("Enter(string value)", 0);
            _transitions.Add("Mul(Stack<string> stack)", 0);
            _transitions.Add("Pow(Stack<string> stack)", 0);
            _transitions.Add("Sqrt(Stack<string> stack)", 0);
            _transitions.Add("Sub(Stack<string> stack)", 0);
        }
    }
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
