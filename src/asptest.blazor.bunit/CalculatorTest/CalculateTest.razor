@using asp.blazor.Components.CalculatorParts
@inherits CalculatorTestBase

@code {
    [Test]
    public void InstantiateDefaultTest()
    {
        var cut = RenderComponent<CalculatorComponent>();
        Assert.That(cut.Markup, Does.Contain("RPN calculator"));      
        // More restrictive bUnit idiom:
        var title = cut.Find("h2");
        title.MarkupMatches(@<h2>RPN calculator</h2>
    );
        // Initial state
        Assert.That(cut.Markup, Does.Contain("Map1.Splash"));
    }

    [Test]
    public void InitEnterTest()
    {
        var cut = RenderComponent<CalculatorComponent>(); 
        cut.Find(Selector(cut.Instance.footer.enterButton)).Click();
        Assert.Multiple(() =>
        {
            Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Enter));
            Assert.That(cut.Markup, Does.Contain("Map1.Enter"));
        });
    }

    [Test]
    public void EnterTest()
    {
        var cut = RenderComponent<CalculatorComponent>(); 
        cut.Find(Selector(cut.Instance.footer.enterButton)).Click();
        Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Enter));
        cut.Find(Selector(Dynamic<Enter>(cut.Instance.calculatorPart).operand)).Change("3.141");
        //cut.Find(Selector(cut.Instance.footer.enterButton)).Click();  // Id not set
        cut.Find("button").Click();
        Assert.Multiple(() =>
        {
            Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Calculate));
            Assert.That(cut.Instance.Main.Stack.Peek(), Is.EqualTo("3.141"));
            Assert.That(cut.Instance.Main.Stack.Count, Is.EqualTo(1));
            Assert.That(cut.Markup, Does.Contain("3.141"));
        });
    }

    //[Test]
    //public void AddTest()
    //{
    //    var cut = RenderComponent<CalculatorComponent>(); 
    //    cut.Find(Selector(cut.Instance.footer.enterButton)).Click();
    //    Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Enter));
    //    cut.Find(Selector(Dynamic<Enter>(cut.Instance.calculatorPart).operand)).Change("2");
    //    cut.Find("button").Click();
    //    Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Calculate));
    //    cut.Find(Selector(cut.Instance.footer.enterButton)).Click();
    //    Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Enter));
    //    cut.Find(Selector(Dynamic<Enter>(cut.Instance.calculatorPart).operand)).Change("3");
    //    cut.Find("button").Click();
    //    Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Calculate));
    //    var before = cut.Instance.Main.Stack.Count;
    //    cut.Find(Selector(Dynamic<Calculate>(cut.Instance.calculatorPart).addButton)).Click();
    //    Assert.Multiple(() =>
    //    {
    //        Assert.That(cut.Instance.State, Is.EqualTo(CalculatorContext.Map1.Calculate));
    //        Assert.That(cut.Instance.Main.Stack.Peek(), Is.EqualTo("5"));
    //        Assert.That(cut.Instance.Main.Stack.Count, Is.EqualTo(before - 1));
    //        Assert.That(cut.Markup, Does.Contain("5"));
    //    });
    //}
}
