@page "/withstorage"

@using asplib.Components
@using asplib.Model

@inherits PersistentComponentBase<Models.Main>

@inject NavigationManager uriHelper;

<h1>minimalist test setup with storage</h1>

<EditForm Model="@Storage">
    Session Storage:
    <InputRadioGroup @ref="storageRadio" Name="Storage" @bind-Value="Storage">
        <!-- InputRadio does not produce an id attribute in Blazor 6.0.4 yet, therefore use the manual Ids for now -->
        <InputRadio @ref="storageViewState" id="storageViewState" name="Storage" value="@Storage.ViewState" TValue="Storage" /> Blazor
        <InputRadio @ref="storageDatabase" id="storageDatabase" name="Storage" value="@Storage.Database" TValue="Storage" /> Database
        <InputRadio @ref="storageSessionStorage" id="storageSessionStorage" name="Storage" value="@Storage.SessionStorage" TValue="Storage" /> Window.sessionStorage
        <InputRadio @ref="storageLocalStorage" id="storageLocalStorage" name="Storage" value="@Storage.LocalStorage" TValue="Storage" /> Window.localStorage
        <InputRadio @ref="storageUrlQuery" id="storageUrlQuery" name="Storage" value="@Storage.UrlQuery" TValue="Storage" /> URL Query string
        <button type="button" @ref="clearButton" id="clearButton" @onclick="@ClearStorage">Clear</button>
    </InputRadioGroup>
</EditForm>
<br />

<p>
    <input @bind="Input" @ref="contentTextBox" class="textBox" />
    <button type="submit" @ref="submitButton" @onclick="@Submit">Submit</button>
</p>

<ul>
    @foreach (var item in Main)
    {
        <li>@item</li>
    }
</ul>


@code {
    public InputRadioGroup<Storage>? storageRadio;
    public InputRadio<Storage>? storageViewState;
    public InputRadio<Storage>? storageDatabase;
    public InputRadio<Storage>? storageSessionStorage;
    public InputRadio<Storage>? storageLocalStorage;
    public InputRadio<Storage>? storageUrlQuery;
    public ElementReference clearButton;
    public ElementReference contentTextBox;
    public ElementReference submitButton;

    // Set the static storage override globally, as no instance is available during DI construction
    // in the PersistentMainFactoryExtension
    private Storage Storage 
    {
        get => GetStorage();
        set
        {
            StorageImplementation.SessionStorage = value;
            StorageHasChanged = true;
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);   // also disposes the component instance on the server
        }
    }

    private String? Input;

    private void Submit()
    {
        if (Input != null)
        {
            Main.Add(Input);
            Input = null;
        }
    }

    private async Task ClearStorage()
    {
        await this.DeleteBrowserStore();
        var uriNoQuery = uriHelper.ToAbsoluteUri(uriHelper.Uri).GetLeftPart(UriPartial.Path);
        uriHelper.NavigateTo(uriNoQuery, forceLoad: true);
    }
}
