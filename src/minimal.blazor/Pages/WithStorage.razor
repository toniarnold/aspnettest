@page "/withstorage"

@using asplib.Components
@using asplib.Model

@inherits PersistentComponentBase<Models.Main>

@inject NavigationManager uriHelper;

<h1>minimalist test setup with storage</h1>

<EditForm Model="@Storage">
    Session Storage:<br />
    <InputRadioGroup Name="Storage" @bind-Value="Storage">
        <InputRadio id="storageViewState" name="Storage" value="@Storage.ViewState" TValue="Storage" /> Blazor
        <InputRadio id="storageDatabase" name="Storage" value="@Storage.Database" TValue="Storage" /> Database
        <InputRadio id="storageSessionStorage" name="Storage" value="@Storage.SessionStorage" TValue="Storage" /> Window.sessionStorage
        <InputRadio id="storageLocalStorage" name="Storage" value="@Storage.LocalStorage" TValue="Storage" /> Window.localStorage
            <button type="button" id="clearButton" @onclick="@Clear">Clear</button>
    </InputRadioGroup>
</EditForm>
<br />

<input @bind="Input" id="contentTextBox" />
<button type="submit" id="submitButton" @onclick="@Submit">Submit</button>
<ul>
    @foreach (var item in Main)
    {
        <li>@item</li>
    }
</ul>


@code {
    // Set the static storage override globally, as no instance is available during DI construction
    // in the PersistentMainFactoryExtension
    private Storage Storage 
    {
        get => StorageImplementation.SessionStorage ?? Storage.ViewState;
        set
        {
            StorageImplementation.SessionStorage = value; 
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);   // also disposes the component instance on the server
        }
    }

    private String? Input;

    private void Submit()
    {
        if (Input != null)
        {
            Main.Add(Input);
            Input = null;
        }
    }

    private async Task Clear()
    {
        await this.DeleteLocalStorage();
    }
}
