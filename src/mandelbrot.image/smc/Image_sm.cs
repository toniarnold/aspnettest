/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Image.sm
 */

using System;
using System.Runtime.Serialization;
using System.Security;
using System.Security.Permissions;
using System.Collections.Generic;

using mandelbrot.image;
using FractalSharp.Algorithms;
using FractalSharp.Imaging;
using SkiaSharp;
[Serializable]
[System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
public sealed class ImageContext :
    statemap.FSMContext,
    ISerializable
{
//---------------------------------------------------------------
// Properties.
//

    public ImageState State
    {
        get
        {
            if (state_ == null)
            {
                throw(
                    new statemap.StateUndefinedException());
            }

            return ((ImageState) state_);
        }
        set
        {
            SetState(value);
        }
    }

    public Image Owner
    {
        get
        {
            return (_owner);
        }
        set
        {
            _owner = value;
        }
    }

    public ImageState[] States
    {
        get
        {
            return (_States);
        }
    }

//---------------------------------------------------------------
// Member methods.
//

    public ImageContext(Image owner) :
        base (RenderMap.Empty)
    {
        _owner = owner;
    }

    public override void EnterStartState()
    {
        State.Entry(this);
        return;
    }

    public ImageContext(SerializationInfo info, StreamingContext context) :
        base ()
    {
        int stackSize;
        int stateId;

        stackSize = info.GetInt32("stackSize");
        if (stackSize > 0)
        {
            int index;
            String name;

            for (index = (stackSize - 1); index >= 0; --index)
            {
                name = "stackIndex" + index;
                stateId = info.GetInt32(name);
                PushState(_States[stateId]);
            }
        }

        stateId = info.GetInt32("state");
        PushState(_States[stateId]);
    }

    public void ComputeParams(Resolution res)
    {
        transition_ = "ComputeParams";
        State.ComputeParams(this, res);
        transition_ = "";
        return;
    }

    public void Process()
    {
        transition_ = "Process";
        State.Process(this);
        transition_ = "";
        return;
    }

    public ImageState valueOf(int stateId)
    {
        return(_States[stateId]);
    }

    [SecurityPermissionAttribute(SecurityAction.Demand, SerializationFormatter=true)]
    public void GetObjectData(SerializationInfo info,
                              StreamingContext context)
    {
        int stackSize = 0;

        if (stateStack_ != null)
        {
            stackSize = stateStack_.Count;
        }

        info.AddValue("stackSize", stackSize);

        if (stackSize > 0)
        {
            int index = 0;
            String name;

            foreach (ImageState state in stateStack_)
            {
                name = "stackIndex" + index;
                info.AddValue(name, state.Id);
                ++index;
            }
        }

        info.AddValue("state", state_.Id);

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    [NonSerialized]
    private Image _owner;

    // Map state IDs to state objects.
    // Used to deserialize an FSM.
    [NonSerialized]
    private static ImageState[] _States =
    {
        RenderMap.Empty,
        RenderMap.Parameters,
        RenderMap.Fractal,
        RenderMap.InnerColors,
        RenderMap.OuterColors,
        RenderMap.Image,
        RenderMap.Rendered,
        RenderMap.Ready
    };

//---------------------------------------------------------------
// Inner classes.
//

    [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
    public abstract class ImageState :
        statemap.State
    {
    //-----------------------------------------------------------
    // Properties.
    //

        public abstract IDictionary<string, int> Transitions
        {
            get;
        }

    //-----------------------------------------------------------
    // Member methods.
    //

        internal ImageState(string name, int id) :
            base (name, id)
        {}

        protected internal virtual void Entry(ImageContext context)
        {}

        protected internal virtual void Exit(ImageContext context)
        {}

        protected internal virtual void ComputeParams(ImageContext context, Resolution res)
        {
            Default(context);
        }

        protected internal virtual void Process(ImageContext context)
        {
            Default(context);
        }

        protected internal virtual void Default(ImageContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.State.Name +
                    ", Transition: " +
                    context.GetTransition()));
        }
    }
    [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]

    internal abstract class RenderMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Statics.
        //
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_Empty Empty =
            new RenderMap_Default.RenderMap_Empty("RenderMap.Empty", 0);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_Parameters Parameters =
            new RenderMap_Default.RenderMap_Parameters("RenderMap.Parameters", 1);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_Fractal Fractal =
            new RenderMap_Default.RenderMap_Fractal("RenderMap.Fractal", 2);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_InnerColors InnerColors =
            new RenderMap_Default.RenderMap_InnerColors("RenderMap.InnerColors", 3);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_OuterColors OuterColors =
            new RenderMap_Default.RenderMap_OuterColors("RenderMap.OuterColors", 4);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_Image Image =
            new RenderMap_Default.RenderMap_Image("RenderMap.Image", 5);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_Rendered Rendered =
            new RenderMap_Default.RenderMap_Rendered("RenderMap.Rendered", 6);
        [NonSerialized]
        internal static readonly RenderMap_Default.RenderMap_Ready Ready =
            new RenderMap_Default.RenderMap_Ready("RenderMap.Ready", 7);
        [NonSerialized]
        private static readonly RenderMap_Default Default =
            new RenderMap_Default("RenderMap.Default", -1);

    }

    [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
    internal class RenderMap_Default :
        ImageState
    {
    //-----------------------------------------------------------
    // Properties.
    //

        public override IDictionary<string, int> Transitions
        {
            get
            {
                return (_transitions);
            }
        }

    //-----------------------------------------------------------
    // Member methods.
    //

        internal RenderMap_Default(string name, int id) :
            base (name, id)
        {}

    //-----------------------------------------------------------
    // Inner classes.
    //

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_Empty :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_Empty(string name, int id) :
                base (name, id)
            {}

            protected internal override void ComputeParams(ImageContext context, Resolution res)
            {

                Image ctxt = context.Owner;


                context.State.Exit(context);
                context.ClearState();

                try
                {
                    ctxt.ComputeParams(res);
                }
                finally
                {
                    context.State = RenderMap.Parameters;
                    context.State.Entry(context);
                }



                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_Empty()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 1);
                _transitions.Add("Process()", 0);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_Parameters :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_Parameters(string name, int id) :
                base (name, id)
            {}

            protected internal override void Process(ImageContext context)
            {

                Image ctxt = context.Owner;


                context.State.Exit(context);
                context.ClearState();

                try
                {
                    ctxt.Renderer.ComputeFractal();
                }
                finally
                {
                    context.State = RenderMap.Fractal;
                    context.State.Entry(context);
                }



                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_Parameters()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_Fractal :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_Fractal(string name, int id) :
                base (name, id)
            {}

            protected internal override void Process(ImageContext context)
            {

                Image ctxt = context.Owner;


                context.State.Exit(context);
                context.ClearState();

                try
                {
                    ctxt.Renderer.ComputeInnerColors();
                }
                finally
                {
                    context.State = RenderMap.InnerColors;
                    context.State.Entry(context);
                }



                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_Fractal()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_InnerColors :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_InnerColors(string name, int id) :
                base (name, id)
            {}

            protected internal override void Process(ImageContext context)
            {

                Image ctxt = context.Owner;


                context.State.Exit(context);
                context.ClearState();

                try
                {
                    ctxt.Renderer.ComputeOuterColors();
                }
                finally
                {
                    context.State = RenderMap.OuterColors;
                    context.State.Entry(context);
                }



                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_InnerColors()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_OuterColors :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_OuterColors(string name, int id) :
                base (name, id)
            {}

            protected internal override void Process(ImageContext context)
            {

                Image ctxt = context.Owner;


                context.State.Exit(context);
                context.ClearState();

                try
                {
                    ctxt.Renderer.CreateImage();
                }
                finally
                {
                    context.State = RenderMap.Image;
                    context.State.Entry(context);
                }



                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_OuterColors()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_Image :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_Image(string name, int id) :
                base (name, id)
            {}

            protected internal override void Process(ImageContext context)
            {

                Image ctxt = context.Owner;


                context.State.Exit(context);
                context.ClearState();

                try
                {
                    ctxt.Renderer.EncodeImage();
                }
                finally
                {
                    context.State = RenderMap.Rendered;
                    context.State.Entry(context);
                }



                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_Image()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_Rendered :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_Rendered(string name, int id) :
                base (name, id)
            {}

            protected internal override void Process(ImageContext context)
            {

                context.State.Exit(context);
                context.State = RenderMap.Ready;
                context.State.Entry(context);


                return;
            }

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_Rendered()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 1);
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("smc"," v. 7.1.0")]
        internal class RenderMap_Ready :
            RenderMap_Default
        {
        //-------------------------------------------------------
        // Properties.
        //

            public override IDictionary<string, int> Transitions
            {
                get
                {
                    return (_transitions);
                }
            }

        //-------------------------------------------------------
        // Member methods.
        //

            internal RenderMap_Ready(string name, int id) :
                base (name, id)
            {}

        //-------------------------------------------------------
        // Member data.
        //

            //---------------------------------------------------
            // Statics.
            //
            new private static IDictionary<string, int> _transitions;

            static RenderMap_Ready()
            {
                _transitions = new Dictionary<string, int>();
                _transitions.Add("ComputeParams(Resolution res)", 0);
                _transitions.Add("Process()", 0);
            }
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Statics.
        //
        private static IDictionary<string, int> _transitions;

        static RenderMap_Default()
        {
            _transitions = new Dictionary<string, int>();
            _transitions.Add("ComputeParams(Resolution res)", 0);
            _transitions.Add("Process()", 0);
        }
    }
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
