digraph TestRunnerFsm {

    node
        [shape=Mrecord width=1.5];

    subgraph cluster_Map1 {

        label="Map1";

        //
        // States (Nodes)
        //

        "Map1::New"
            [label="{New}"];

        "Map1::RunningOk"
            [label="{RunningOk}"];

        "Map1::RunningWarning"
            [label="{RunningWarning}"];

        "Map1::RunningError"
            [label="{RunningError}"];

        "Map1::Completed"
            [label="{Completed}"];

        "Map1::Passed"
            [label="{Passed}"];

        "Map1::ResultXml"
            [label="{ResultXml}"];

        "%start"
            [label="" shape=circle style=filled fillcolor=black width=0.25];

        //
        // Transitions (Edges)
        //

        "Map1::New" -> "Map1::RunningOk"
            [label="RunTests/\l"];

        "Map1::RunningOk" -> "Map1::RunningOk"
            [label="OnTestEvent\l\[result == TestStatus.Passed\]/\l"];

        "Map1::RunningOk" -> "Map1::RunningWarning"
            [label="OnTestEvent\l\[result == TestStatus.Warning\]/\l"];

        "Map1::RunningOk" -> "Map1::RunningError"
            [label="OnTestEvent\l\[result == TestStatus.Failed\]/\l"];

        "Map1::RunningOk" -> "Map1::Completed"
            [label="Complete/\l"];

        "Map1::RunningWarning" -> "Map1::RunningError"
            [label="OnTestEvent\l\[result ==  TestStatus.Failed\]/\l"];

        "Map1::RunningWarning" -> "Map1::Completed"
            [label="Complete/\l"];

        "Map1::RunningError" -> "Map1::RunningError"
            [label="OnTestEvent/\l"];

        "Map1::RunningError" -> "Map1::Completed"
            [label="Complete/\l"];

        "Map1::Completed" -> "Map1::Passed"
            [label="Report\l\[TestRunner.Passed\]/\l"];

        "Map1::Completed" -> "Map1::ResultXml"
            [label="Report/\l"];

        "Map1::Passed" -> "Map1::RunningOk"
            [label="RunTests/\l"];

        "Map1::ResultXml" -> "Map1::RunningOk"
            [label="RunTests/\l"];

        "%start" -> "Map1::New"
    }

}
